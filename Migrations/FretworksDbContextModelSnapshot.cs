// <auto-generated />
using System;
using Fretworks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fretworks.Migrations
{
    [DbContext(typeof(FretworksDbContext))]
    partial class FretworksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fretworks.Models.RepairTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DropOffDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("Instrument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRushed")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("RepairTickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 2,
                            CustomerName = "Ryan Jones",
                            DropOffDate = new DateTime(2024, 4, 11, 10, 2, 25, 488, DateTimeKind.Local).AddTicks(4294),
                            Email = "ryanjones@email.com",
                            EmployeeId = 1,
                            Instrument = "Fender Telecaster",
                            IsCompleted = false,
                            IsRushed = false,
                            Message = "Intonation Issues",
                            PhoneNumber = "615-555-5555"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            CustomerName = "Ryan Jones",
                            DropOffDate = new DateTime(2024, 4, 11, 10, 2, 25, 488, DateTimeKind.Local).AddTicks(4347),
                            Email = "ryanjones@email.com",
                            EmployeeId = 1,
                            Instrument = "Fender Stratocaster",
                            IsCompleted = false,
                            IsRushed = true,
                            Message = "Tuning Issues",
                            PhoneNumber = "615-555-5555"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            CustomerName = "Ryan Jones",
                            DropOffDate = new DateTime(2024, 4, 11, 10, 2, 25, 488, DateTimeKind.Local).AddTicks(4386),
                            Email = "ryanjones@email.com",
                            Instrument = "Gibson Les Paul",
                            IsCompleted = false,
                            IsRushed = false,
                            Message = "Breaking Strings",
                            PhoneNumber = "615-555-5555"
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 2,
                            CustomerName = "Ryan Jones",
                            DropOffDate = new DateTime(2024, 4, 11, 10, 2, 25, 488, DateTimeKind.Local).AddTicks(4389),
                            Email = "ryanjones@email.com",
                            Instrument = "Gibson ES 335",
                            IsCompleted = false,
                            IsRushed = false,
                            Message = "scratchy volume pot",
                            PhoneNumber = "615-555-5555"
                        });
                });

            modelBuilder.Entity("Fretworks.Models.RepairTicketService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RepairTicketId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RepairTicketId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RepairTicketServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RepairTicketId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            RepairTicketId = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            RepairTicketId = 1,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            RepairTicketId = 2,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 5,
                            RepairTicketId = 2,
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 6,
                            RepairTicketId = 2,
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 7,
                            RepairTicketId = 3,
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 8,
                            RepairTicketId = 3,
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 9,
                            RepairTicketId = 4,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 10,
                            RepairTicketId = 4,
                            ServiceId = 2
                        });
                });

            modelBuilder.Entity("Fretworks.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 20.00m,
                            ServiceName = "Re-stringing"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 50.00m,
                            ServiceName = "Fret level"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 30.00m,
                            ServiceName = "Truss rod adjustment"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 40.00m,
                            ServiceName = "Nut replacement"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 25.00m,
                            ServiceName = "Bridge adjustment"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 60.00m,
                            ServiceName = "Electronics repair"
                        },
                        new
                        {
                            Id = 7,
                            Cost = 15.00m,
                            ServiceName = "Fretboard cleaning"
                        },
                        new
                        {
                            Id = 8,
                            Cost = 35.00m,
                            ServiceName = "Intonation setup"
                        },
                        new
                        {
                            Id = 9,
                            Cost = 80.00m,
                            ServiceName = "Neck reset"
                        },
                        new
                        {
                            Id = 10,
                            Cost = 20.00m,
                            ServiceName = "Polishing"
                        },
                        new
                        {
                            Id = 11,
                            Cost = 70.00m,
                            ServiceName = "Pickup replacement"
                        },
                        new
                        {
                            Id = 12,
                            Cost = 30.00m,
                            ServiceName = "Action adjustment"
                        },
                        new
                        {
                            Id = 13,
                            Cost = 45.00m,
                            ServiceName = "Tuning machine installation"
                        },
                        new
                        {
                            Id = 14,
                            Cost = 90.00m,
                            ServiceName = "Refretting"
                        },
                        new
                        {
                            Id = 15,
                            Cost = 25.00m,
                            ServiceName = "Nut filing"
                        },
                        new
                        {
                            Id = 16,
                            Cost = 55.00m,
                            ServiceName = "Finish repair"
                        },
                        new
                        {
                            Id = 17,
                            Cost = 100.00m,
                            ServiceName = "Setup & Maintenance"
                        },
                        new
                        {
                            Id = 18,
                            Cost = 120.00m,
                            ServiceName = "Neck replacement"
                        },
                        new
                        {
                            Id = 19,
                            Cost = 10.00m,
                            ServiceName = "Strap button installation"
                        },
                        new
                        {
                            Id = 20,
                            Cost = 150.00m,
                            ServiceName = "Custom setup"
                        });
                });

            modelBuilder.Entity("Fretworks.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsEmployee")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            IsEmployee = true,
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "102 Main Street",
                            FirstName = "Ryan",
                            IdentityUserId = "3f14afbc-d3e9-4f36-b6d2-9f490b6e4b12",
                            IsEmployee = false,
                            LastName = "Jones"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "d6c7e8e9-f0f1-g2h3-i4j5-k6l7m8n9o0p1",
                            Name = "Customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa453e94-7d33-45c4-8207-43cfd080dd9b",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEGvd8ePU8lTgWa18odR09sbRxqGDWn0JPuLCFPzlDoU9Vjb6wF2fQDg+lH6UmXu3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d50df3b-2904-42e2-a84c-44977b23cf7e",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "3f14afbc-d3e9-4f36-b6d2-9f490b6e4b12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8d4cd43-28dd-4668-b619-9a1e8ede549f",
                            Email = "ryanjones@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEC4wGtbe9+zcTsd/Mn7ggPx4c6sMuSLE1NAYG6wZGpx9pjdSbO+ySK5CeWjX1+MR4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "836fc7d8-0efe-4d6c-b69d-bcb7982da1ca",
                            TwoFactorEnabled = false,
                            UserName = "RyanJones"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "3f14afbc-d3e9-4f36-b6d2-9f490b6e4b12",
                            RoleId = "d6c7e8e9-f0f1-g2h3-i4j5-k6l7m8n9o0p1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fretworks.Models.RepairTicket", b =>
                {
                    b.HasOne("Fretworks.Models.UserProfile", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fretworks.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fretworks.Models.RepairTicketService", b =>
                {
                    b.HasOne("Fretworks.Models.RepairTicket", null)
                        .WithMany("RepairTicketServices")
                        .HasForeignKey("RepairTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fretworks.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Fretworks.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fretworks.Models.RepairTicket", b =>
                {
                    b.Navigation("RepairTicketServices");
                });
#pragma warning restore 612, 618
        }
    }
}
